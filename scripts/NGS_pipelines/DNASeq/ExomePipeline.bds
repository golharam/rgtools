#!/usr/bin/env bds

string external_packages = "/apps/sys/galaxy/external_packages"
string fastqValidatorApp = "$external_packages/bin/fastQValidator"
string fastqcApp = "$external_packages/bin/fastqc"
string bwaApp = "$external_packages/bin/bwa"
string javaApp = "$external_packages/bin/java"
string picardJar = "$external_packages/picard-tools-1.129/picard.jar"
string samtoolsApp = "$external_packages/bin/samtools"

string reference_genomes = "/ng18/galaxy/reference_genomes"
string genome = "hg19"
string bwaReference = "$reference_genomes/$genome/bwa_index/$genome"
string reference = "$reference_genomes/$genome/$genome.fa"

string gatkJar = "/ngs/ngs15/golharr/apps/GenomeAnalysisTK-2014.3-17-g0583018/GenomeAnalysisTK.jar"
string gatkKnownSnps = "/ngs/ngs15/golharr/NGS/reference/hg19/reference/1000G_phase1.snps.high_confidence.hg19.vcf"
string gatkHapMap = "/ngs/ngs15/golharr/NGS/reference/hg19/reference/hapmap_3.3.hg19.vcf"
string gatkOmni = "/ngs/ngs15/golharr/NGS/reference/hg19/reference/1000G_omni2.5.hg19.vcf"
string gatkDbSnp = "/ngs/ngs15/golharr/NGS/reference/hg19/reference/dbsnp_137.hg19.vcf"
string gatkMills = "/ngs/ngs15/golharr/NGS/reference/hg19/reference/Mills_and_1000G_gold_standard.indels.hg19.vcf"
string cgaJar = "/ngs/ngs15/golharr/apps/CancerAnalysisPackage-2014.4-8-gf14306c/SomaticAnalysisTK.jar"
string cosmicVcf = "/ngs/ngs15/golharr/apps/CancerAnalysisPackage-2014.4-8-gf14306c/data/reference/hg19_CosmicCodingMuts_v70.vcf"
string snpEffDir = "/apps/sys/galaxy/external_packages/snpEff_4.1E"
string snpEffJar = "/apps/sys/galaxy/external_packages/snpEff_4.1E/snpEff.jar"

print "Exome Pipeline v1.1\n"

# 1.  Get the cohort of samples to process.  The name of the file is either 
#     passed on the command line as the first argument, or is assumed to be
#     in the current directory and named samples.txt

string readType	# single/paired
string caller # ug/hc/MuTect
string normalControl
string cohort = "samples.txt"
string baitRegionsBedFile = ""
string baitRegionsListFile = ""
string targetRegionsBedFile = "targets.bed"
string targetRegionsListFile = ""
int aws = 0
string s3bucket = ""
string analysisDir = "analysis"
void usage() {
	print "Usage: ExomePipeline.bds -readType [single/paired] -caller [ug/hc/MuTect -normalControl <path/to/normal/BAM>] [-cohort <samples.txt>] -targetRegionsBedFile <targets.bed> [-baitRegionsBedFile <baits.bed>] [-aws 0/1 -bucket <s3bucket>] [-analysisDir <dir>]\n"
	exit(-1)
}

void checkParameters() {
	if (readType.isEmpty()) {
		print "Error: readType not specified\n"
		usage()
	}

	if (readType != "single") {
		if (readType != "paired") {
			print "Error: Unknown readType: $readType\n"
			usage()
		}
	}
	
	if (caller.isEmpty()) {
		print "Error: Caller not specified\n";
		usage()
	}
	if (caller != "hc") {
		if (caller != "ug") {
			if (caller != "MuTect") {
				print "Error: Unknown caller specified: $caller\n"
				usage()
			} #else {
			  #	if (normalControl.isEmpty()) {
			  #		print "Error: MuTect requires a normal control.\n"
			  #		usage()
			  #	}
			  # }
		}
	}
	
	if (!cohort.canRead()) {
		print "ERROR: Unable to locate $cohort\n"
		usage()
	}
	if (!targetRegionsBedFile.canRead()) {
		print "ERROR: Unable to locate $targetRegionsBedFile\n"
		usage()
	} else {
		targetRegionsListFile = targetRegionsBedFile.swapExt("list")
		if (!targetRegionsListFile.canRead()) {
			print "ERROR: Unable to locate $targetRegionsListFile\n"
			usage()
		}
	}
	if ((!baitRegionsBedFile.isEmpty()) && (baitRegionsBedFile.canRead())) {
		baitRegionsBedFile = baitRegionsBedFile.swapExt("list")
		if (!baitRegionsBedFile.canRead()) {
			print "ERROR: Unable to location $baitRegionsListFile\n"
			usage()
		}
	}
	print "\tcohort: $cohort\n"
	print "\ttargets: $targetRegionsBedFile ($targetRegionsListFile)\n"
	print "\tbaits: $baitRegionsBedFile ($baitRegionsListFile)\n"
	print "\tread type: $readType\n"
	print "\tvariant caller: $caller\n";
	if (caller == "MuTect") {
		print "\t\tNormal: $normalControl\n"
	}
	print "\tAWS: $aws\n"
	if (aws == 1) {
		if (s3bucket.isEmpty()) {
			print "Error: AWS specified, but no bucket provided\n";
			usage()
		}
		print "\tS3 Bucket: $s3bucket\n"
	}
	print "\tanalysis directory: $analysisDir\n"
	print "\n"
}

checkParameters()

# 2.  Read in the list of samples including sample name, fastq1, fastq2 and
#     build a sample list

string[] samples
string{} fq1
string{} fq2
string[] fastqValidatorFiles
string[] fastqcFiles
string[] alnSummaryMetricsFiles
string[] dedupMetricsFiles
string[] targetRegionCoverageFiles
string[] hsMetricsFiles

string{} sampleDedupBamFiles
string{} sampleRealignedBamFiles
string{} sampleRecalibratedBamFiles
string{} sampleRawGVCFFiles

string[] lines = cohort.readLines()
for ( string line : lines ) {
	string sample
	string fastq1
	string fastq2
	(sample, fastq1, fastq2) = line.split('\t')

	samples.add(sample)

	fq1{sample} = fastq1

	if (readType == "paired") {
		if (fastq2.isEmpty()) {
			print "Error: Expected fastq2 but none was specified for $sample\n"
			exit(-1)
		}
		fq2{sample} = fastq2
	}
}

# Print out the sample information to see that it was loaded correctly
print "Samples:\n"
for (string sample : samples) {
        print "\t$sample\n"
#	print "\t" + fq1{sample}
#	if (readType.startsWith("paired")) {
#		 print "," + fq2{sample}
#	}
#	print "\n"
}
print "\n"

# Create intermediate analysis directories
sys if [ ! -d $analysisDir/qaqc ]; then mkdir -p $analysisDir/qaqc; fi
sys if [ ! -d $analysisDir/intermediate ]; then mkdir -p $analysisDir/intermediate; fi
sys if [ ! -d $analysisDir/coverage ]; then mkdir -p $analysisDir/coverage; fi
sys if [ ! -d $analysisDir/BAM ]; then mkdir -p $analysisDir/BAM; fi
sys if [ ! -d $analysisDir/VCF ]; then mkdir -p $analysisDir/VCF; fi

# For each sample:
for (string sample : samples) {
	string fastq1
	string fastq2
		
	fastq1 = fq1{sample}
	if (readType.startsWith("paired")) {
	        fastq2 = fq2{sample}
        }
	
	# 1.  Validate the FASTQ Files
        string outFile = "$analysisDir/qaqc/$sample.fq1.fastqValidator.txt"
	task (outFile <- fastq1, taskName := "FastQValidator_1_" + sample) {
 		sys $fastqValidatorApp --disableSeqIDCheck --file $fastq1 > $outFile 2>&1
	}
	fastqValidatorFiles.add(outFile)

	if (readType == "paired") {
		outFile = "$analysisDir/qaqc/$sample.fq2.fastqValidator.txt"
		task (outFile <- fastq2, taskName := "FastQValidator_2_" + sample) {
			sys $fastqValidatorApp --disableSeqIDCheck --file $fastq2 > $outFile 2>&1
		}
		fastqValidatorFiles.add(outFile)
	}
	
	# 2.  Run FASTQC
	string fqname = fastq1.baseName()
	string [] fastqcFiles
	# In FastQC v0.11.3, there is a bug when you specify an output directory as well are.  .fq is not stripped.  .fq
	# is stripped when an output directory is NOT specified.  The bug has been reported and a fix is expected in 0.11.4.
	if (fqname.endsWith(".gz")) {
		fqname = fqname.replace(".gz", "")
	}
	if (fqname.endsWith(".fastq")) {
		fqname = fqname.replace(".fastq", "")
	}
	fastqcFiles.add("$analysisDir/qaqc/" + fqname + "_fastqc.html")
	fastqcFiles.add("$analysisDir/qaqc/" + fqname + "_fastqc.zip")
	if (readType == "single") {
		task (fastqcFiles <- fastq1, taskName := "FastQC_" + sample) {
        	        sys $fastqcApp --outdir=$analysisDir/qaqc $fastq1
		}
        }
	if (readType == "paired") {
		fqname = fastq2.baseName()
		if (fqname.endsWith(".gz")) {
                	fqname = fqname.replace(".gz", "")
        	}
	        if (fqname.endsWith(".fastq")) {
        	        fqname = fqname.replace(".fastq", "")
	        }

		fastqcFiles.add("$analysisDir/qaqc/" + fqname + "_fastqc.html")
		fastqcFiles.add("$analysisDir/qaqc/" + fqname + "_fastqc.zip")
		task (fastqcFiles <- [fastq1, fastq2], cpus := 2, taskName := "FastQC_" + sample) {
			sys $fastqcApp -t 2 --outdir=$analysisDir/qaqc $fastq1 $fastq2
		}
	}
	
	# 3.  Map the sample
	string samFile = "$analysisDir/intermediate/$sample.sam"
	string bamFile = "$analysisDir/intermediate/$sample.bam"
	if (readType == "single") {
		 task (samFile <- fastq1, cpus := 8, taskName := sample+"_bwa") {
			sys $bwaApp mem -t 8 -M -R '@RG\tID:$sample\tSM:$sample\tLB:$sample\tPL:illumina' $bwaReference $fastq1 > $samFile
		}
	} else {
		task (samFile <- [fastq1, fastq2], cpus := 8, taskName := sample+"_bwa") {
			sys $bwaApp mem -t 8 -M -R '@RG\tID:$sample\tSM:$sample\tLB:$sample\tPL:illumina' $bwaReference $fastq1 $fastq2 > $samFile
		}
	}
	
	# 4.  Sort the BAM file	
	task (bamFile <- samFile, taskName := sample+"_sortBam") {
		sys $javaApp -Xmx4G -Djava.io.tmpdir=/scratch -jar $picardJar SortSam SO=coordinate INPUT=$samFile OUTPUT=$bamFile VALIDATION_STRINGENCY=LENIENT CREATE_INDEX=true
	}
	
	# 3.  Collect alignment metrics		
	string alnSummaryMetricsFile = "$analysisDir/qaqc/$sample.alignment_summary_metrics.txt"
	task (alnSummaryMetricsFile <- bamFile, taskName := "collectAlnMetrics_"+sample) {
		sys $javaApp -Xmx4G -Djava.io.tmpdir=/scratch -jar $picardJar CollectAlignmentSummaryMetrics I=$bamFile O=$alnSummaryMetricsFile LEVEL=SAMPLE R=$reference
	}
	alnSummaryMetricsFiles.add(alnSummaryMetricsFile)
	
	# 4.  Mark Duplicates
	string dedupBamFile = "$analysisDir/intermediate/$sample.dedup.bam"
	string dedupMetricsFile = "$analysisDir/qaqc/$sample.dedup.metrics"
	task ([dedupBamFile, dedupMetricsFile] <- bamFile, taskName := "dedup_"+sample) {
		sys $javaApp -Xmx4G -Djava.io.tmpdir=/scratch -jar $picardJar MarkDuplicates I=$bamFile O=$dedupBamFile M=$dedupMetricsFile VALIDATION_STRINGENCY=LENIENT CREATE_INDEX=true
	}
	dedupMetricsFiles.add(dedupMetricsFile)
	
	# 5.  Collect target region coverage
	string targetRegionCoverageFile = "$analysisDir/coverage/$sample.targetRegionCoverage.txt"
	task (targetRegionCoverageFile <- dedupBamFile, taskName := "collectTargetRegionCoverage_" + sample) {
		sys $javaApp -Xmx4G -Djava.io.tmpdir=/scratch -jar /home/golharr/workspace/rgtools/dist/CalculateTargetRegionCoverage.jar B=$dedupBamFile G=$targetRegionsBedFile O=$targetRegionCoverageFile
	}
	targetRegionCoverageFiles.add(targetRegionCoverageFile)
	
	# 6. Collect hsMetrics and per target metrics
	string hsMetricsFile = "$analysisDir/qaqc/$sample.hsmetrics.txt"
	string perTargetMetricsFile = "$analysisDir/coverage/$sample.per_target_metrics.txt"
	task ([ hsMetricsFile, perTargetMetricsFile ] <- dedupBamFile, taskName := "CalculateHsMetrics_" + sample) {
		sys $javaApp -Xmx4G -jar $picardJar CalculateHsMetrics BI=$targetRegionsListFile TI=$targetRegionsListFile REFERENCE_SEQUENCE=$reference I=$dedupBamFile O=$hsMetricsFile PER_TARGET_COVERAGE=$perTargetMetricsFile
	}
	hsMetricsFiles.add(hsMetricsFile)

	sampleDedupBamFiles{sample} = dedupBamFile
	sampleRealignedBamFiles{sample} = "$analysisDir/intermediate/$sample.dedup.realigned.bam"
	sampleRecalibratedBamFiles{sample} = "$analysisDir/BAM/$sample.dedup.realigned.recal.bam"
}

# 7.  Summarize FastQValidator 
string outFile = "$analysisDir/qaqc/fastqvalidator_summary.txt"
task (outFile <- fastqValidatorFiles, taskName := "summarizeFastQValidator") {
	sys /home/golharr/workspace/rgtools/scripts/perl/summarizeFastQValidatorMetrics.pl $cohort > $outFile
}

# 7. Summarize FastQC Metrics
outFile = "$analysisDir/qaqc/fastqcmetrics.txt"
task (outFile <- fastqcFiles, taskName := "summarizeFastQC") {
        sys /home/golharr/workspace/rgtools/scripts/perl/summarizeFastQCMetrics.pl $analysisDir/qaqc > $outFile
}

# 7. Collect Alignment Summary Metrics
outFile = "$analysisDir/qaqc/alignmentSummaryMetrics.txt"
task (outFile <- alnSummaryMetricsFiles, taskName := "summarizeAlignmentMetrics" ) {
	sys /home/golharr/workspace/rgtools/scripts/perl/summarizeAlignmentSummaryMetrics.pl $cohort > $outFile
}

# 7. Collect Deduplication Metrics
outFile = "$analysisDir/qaqc/dedupSummaryMetrics.txt"
task (outFile <- dedupMetricsFiles, taskName := "summarizeDedupMetrics") {
	sys /home/golharr/workspace/rgtools/scripts/perl/summarizeDedupMetrics.pl $cohort > $outFile
}

# 7.  Collect Target Region Coverage Metrics
outFile = "$analysisDir/coverage/targetRegionCoverageMetrics.txt"
task (outFile <- targetRegionCoverageFiles, taskName := "summarizeTargetRegions") {
	sys /home/golharr/workspace/rgtools/scripts/perl/summarizeTargetRegionCoverage.pl $cohort > $outFile
}

# 7.  Collect hsMetrics
outFile = "$analysisDir/qaqc/hsMetrics.txt"
task ( outFile <- hsMetricsFiles, taskName := "collectHsMetrics" ) {
	sys /home/golharr/workspace/rgtools/scripts/perl/summarizeHsMetrics.pl $cohort > $outFile
}

# TODO
# 7. Summary Per Target Metrics
#task ( "analysis/coverage/pertargetmetrics.txt" <- targetRegionCoverageFiles.values()) {
#	sys /home/golharr/workspace/rgtools/scripts/perl/summarizePerTargetMetrics.pl samples.txt > analysis/coverage/pertargetmetrics.txt
#}

# ~/workspace/rgtools/scripts/R/plotCoverage.R

# 8.  Create indel targets
string indelRealignerTargetsFile = "$analysisDir/intermediate/indelrealigner.list"
task ( indelRealignerTargetsFile <- sampleDedupBamFiles.values(), cpus := 64, taskName := "indelTargetCreator") {
	sys find $analysisDir/intermediate -name '*.dedup.bam' > $analysisDir/intermediate/dedupbamfiles.list; \
            $javaApp -jar $gatkJar \
                -T RealignerTargetCreator \
                -nt 64 \
                -R $reference \
                -I $analysisDir/intermediate/dedupbamfiles.list \
                -o $indelRealignerTargetsFile \
		-L $targetRegionsBedFile
		#-allowPotentiallyMisencodedQuals
}

# 9.  Realign around indels
task( sampleRealignedBamFiles.values() <- indelRealignerTargetsFile, taskName := "IndelRealigner" ) {
	sys sed 's/$analysisDir\/intermediate\///' $analysisDir/intermediate/dedupbamfiles.list > $analysisDir/intermediate/dedupbamfiles_nopath.txt; \
	    cat $analysisDir/intermediate/dedupbamfiles_nopath.txt | sed 's/.bam/.realigned.bam/' | awk '{print "$analysisDir/intermediate/"$1}' > $analysisDir/intermediate/bamfiles.realigned.list; \
	    paste $analysisDir/intermediate/dedupbamfiles_nopath.txt $analysisDir/intermediate/bamfiles.realigned.list > $analysisDir/intermediate/bamfiles.realigned.map; \
	    $javaApp -Xmx8G -jar $gatkJar \
		-T IndelRealigner \
		-R $reference \
		-I $analysisDir/intermediate/dedupbamfiles.list \
		-targetIntervals $indelRealignerTargetsFile \
		-nWayOut $analysisDir/intermediate/bamfiles.realigned.map \
		-L $targetRegionsBedFile \
		-allowPotentiallyMisencodedQuals
}

# 7a.  Recalibrate quality scores
task ( "$analysisDir/intermediate/recal.table" <- sampleRealignedBamFiles.values(), cpus := 64, taskName := "BaseRecalibrator_Step1") {
	sys $javaApp -jar $gatkJar \
		-T BaseRecalibrator \
		-I $analysisDir/intermediate/bamfiles.realigned.list \
		-R $reference \
		-nct 64 \
		-o $analysisDir/intermediate/recal.table \
		-knownSites $gatkKnownSnps \
		-L $targetRegionsBedFile
		#-allowPotentiallyMisencodedQuals
		#--fix_misencoded_quality_scores #\
}

# 7b.  Recalibrate quality scores
task ( "$analysisDir/intermediate/post_recal.table" <- "$analysisDir/intermediate/recal.table", cpus := 64, taskName := "BaseRecalibration_Step2" ) {
	sys $javaApp -jar $gatkJar \
		-T BaseRecalibrator \
		-I $analysisDir/intermediate/bamfiles.realigned.list \
		 -knownSites $gatkKnownSnps \
		-R $reference \
		-nct 64 \
		-BQSR $analysisDir/intermediate/recal.table \
		-o $analysisDir/intermediate/post_recal.table \
		-L $targetRegionsBedFile
}

# 7c.  Plot recalibration
task ( "$analysisDir/intermediate/recalibration_plots.pdf" <- ["$analysisDir/intermediate/recal.table", "$analysisDir/intermediate/post_recal.table"], taskName := "plotRecalibration" ) {
	sys $javaApp -jar $gatkJar \
		-T AnalyzeCovariates \
		-R $reference \
		-before $analysisDir/intermediate/recal.table \
		-after $analysisDir/intermediate/post_recal.table \
		-plots $analysisDir/intermediate/recalibration_plots.pdf
}

# 7d. Output recalibrated BAM files
string recalBamFiles = ""
for (string sample : samples) {
	string realignedBamFile = sampleRealignedBamFiles{sample}
	string recalBamFile = sampleRecalibratedBamFiles{sample}
	
	recalBamFiles += " -I " + recalBamFile
	task ( recalBamFile <- [ "$analysisDir/intermediate/recal.table", realignedBamFile ], taskName := "PrintReads_$sample") {
		sys $javaApp -jar $gatkJar \
			-T PrintReads \
			-R $reference \
			-I $realignedBamFile \
			-BQSR $analysisDir/intermediate/recal.table \
			-o $recalBamFile
	}
}

# 8.  Call SNPs using selected variant caller
string variantFiles = ""
for (string sample : samples) {
	string recalBamFile = sampleRecalibratedBamFiles{sample}

	if (caller == "hc") {
		# 8a.  Call SNPs/Indels in GVCF mode
		string vcfFile = "$analysisDir/intermediate/" + sample + ".raw.snps.indels.g.vcf"
		sampleRawGVCFFiles{sample} = vcfFile
		variantFiles += " -V " + vcfFile

		task ( vcfFile <- recalBamFile, taskName := "HaplotypeCaller_$sample" ) {
			sys $javaApp -jar $gatkJar \
				-T HaplotypeCaller \
				-R $reference \
				-I $recalBamFile \
				--emitRefConfidence GVCF \
				--variant_index_type LINEAR \
				--variant_index_parameter 128000 \
				--dbsnp $gatkKnownSnps \
				-o $vcfFile
		}
	}

	if (caller == "MuTect") {
                string callStats = "$analysisDir/MuTect/$sample.callStats.txt"
                string coverageWigFile = "$analysisDir/MuTect/$sample.wig.txt"
                string vcfRawFile = "$analysisDir/MuTect/$sample.vcf"
		string vcfFilteredFile = "$analysisDir/MuTect/$sample.filtered.vcf"

		sys if [ ! -e "$analysisDir/MuTect" ]; then mkdir -p $analysisDir/MuTect; fi

		if (normalControl.isEmpty()) {
			sampleRawGVCFFiles{sample} = vcfFilteredFile
			variantFiles += " -V " + vcfFilteredFile
                        task ( [ vcfRawFile, coverageWigFile, callStats ] <- recalBamFile, taskName := "MuTect_"+sample) {
                                sys $javaApp -jar $cgaJar \
                                        -T MuTect \
                                        -R $reference \
                                        --cosmic $cosmicVcf \
                                        --dbsnp $gatkKnownSnps \
                                        -L $targetRegionsListFile \
                                        --input_file:tumor $recalBamFile \
                                        --vcf $vcfRawFile \
                                        --out $callStats \
                                        --coverage_file $coverageWigFile
			}
			task ( vcfFilteredFile <- vcfRawFile, taskName := "SelectVariants_"+sample) {
				sys $javaApp -jar $gatkJar \
					-T SelectVariants \
					-R $reference \
					--variant $vcfRawFile \
					-o $vcfFilteredFile \
					-sn $sample \
					-env -ef 
                        }
		} else {
			if (normalControl != recalBamFile) {
        	                sampleRawGVCFFiles{sample} = vcfFilteredFile
	                        variantFiles += " -V " + vcfFilteredFile
				task ( [ vcfRawFile, coverageWigFile, callStats ] <- recalBamFile, taskName := "MuTect_"+sample) {
			                sys $javaApp -jar $cgaJar \
       	 			                -T MuTect \
       		        	 	        -R $reference \
       	                		 	--cosmic $cosmicVcf \
		                       		--dbsnp $gatkKnownSnps \
	        		                -L $targetRegionsListFile \
        	        		        --input_file:normal $normalControl \
                	        		--input_file:tumor $recalBamFile \
						--vcf $vcfRawFile \
						--out $callStats \
						--coverage_file $coverageWigFile
				}
				task ( vcfFilteredFile <- vcfRawFile, taskName := "SelectVariants_"+sample) {
					sys $javaApp -jar $gatkJar \
						-T SelectVariants \
						-R $reference \
						--variant $vcfRawFile \
						-o $vcfFilteredFile \
						-sn $sample \
						-env -ef
				}
			} 
		}
	}
}
if (caller == "ug") {
	# 8a.  Call UnifiedGenotyper
	task ( "$analysisDir/intermediate/cohort.ug.vcf" <- sampleRecalibratedBamFiles.values(), cpus := 64, taskName := "UnifiedGenotyper") {
		sys $javaApp -jar $gatkJar \
			-T UnifiedGenotyper \
			-R $reference \
			-nt 64 \
			$recalBamFiles \
			--dbsnp $gatkKnownSnps \
			-stand_call_conf 50.0 \
			-stand_emit_conf 10.0 \
			-L $targetRegionsListFile \
			-o "$analysisDir/intermediate/cohort.ug.vcf"
	}
}

# 8b.  Call GenotypeGVCFs (merge GVCFs)
if (caller == "hc") {
        task ( "$analysisDir/intermediate/cohort.raw.hc.g.vcf" <- sampleRawGVCFFiles.values(), cpus := 64, taskName := "GenotypeGVCFs") {
                sys $javaApp -Xmx64G -jar $gatkJar \
                        -R $reference \
                        -T GenotypeGVCFs \
                        -o $analysisDir/intermediate/cohort.raw.hc.g.vcf \
                        --dbsnp $gatkKnownSnps \
                        -nt 64 \
                        $variantFiles
        }

	# 9.  BQSR
	# TBD: If annotation is missing, it needs to be added using VariantAnnotator.
# See http://gatkforums.broadinstitute.org/discussion/1259/which-training-sets-arguments-should-i-use-for-running-vqsr
	task ( [ "analysis/intermediate/recalibrate_SNP.recal", "analysis/intermediate/recalibrate_SNP.tranches", "analysis/intermediate/recalibrate_SNP_plots.R" ] <- "analysis/intermediate/cohort.raw.hc.g.vcf", taskName := "VariantRecalibrator_v1") {
	        sys $javaApp -Xmx64G -jar $gatkJar \
			-T VariantRecalibrator \
			-R $reference \
			--input analysis/intermediate/cohort.raw.hc.g.vcf \
			-recalFile analysis/intermediate/recalibrate_SNP.recal \
			-tranchesFile analysis/intermediate/recalibrate_SNP.tranches \
			-rscriptFile analysis/intermediate/recalibrate_SNP_plots.R \
			--resource:hapmap,known=false,training=true,truth=true,prior=15.0 $gatkHapMap \
			--resource:omni,known=false,training=true,truth=true,prior=12.0 $gatkOmni \
			--resource:1000G,known=false,training=true,truth=false,prior=10.0 $gatkKnownSnps \
			--resource:dbsnp,known=true,training=false,trush=false,prior=2.0 $gatkDbSnp \
			-an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an InbreedingCoeff \
			-mode SNP \
			-tranche 100 -tranche 99.9 -tranche 99.5 -tranche 99.0 -tranche 90.0 \
			# DP should not be used for exomes, only whole genomes
			#-an DP
	}
}

if (caller == "MuTect") {
	# Merge variants
	task ( "$analysisDir/MuTect/cohort.raw.vcf" <- sampleRawGVCFFiles.values(), taskName := "Combine variants") {
		sys $javaApp -Xmx64G -jar $gatkJar \
			-T CombineVariants \
			-R $reference \
			$variantFiles \
			-o $analysisDir/MuTect/cohort.raw.vcf
	}

	# Collect some statistics on the variants
	string evalString = ""
	for (string sample : samples) {
		evalString += " --eval:$sample $analysisDir/MuTect/$sample.vcf"
	}
	task ( "$analysisDir/MuTect/cohort.raw.eval.txt" <- sampleRawGVCFFiles.values(), taskName := "VariantEval") {
		sys $javaApp -Xmx64G -jar $gatkJar \
			-T VariantEval \
			-R $reference \
			$evalString \
			-o $analysisDir/MuTect/cohort.raw.eval.txt
	}
	# Annotate variants
	task ( [ "$analysisDir/MuTect/cohort.snpEff.vcf", "$analysisDir/MuTect/snpEff_summary.html", "$analysisDir/MuTect/snpEff_summary.genes.txt"] <- "$analysisDir/MuTect/cohort.raw.vcf", taskName := "SnpEff") {
        	sys $javaApp -jar $snpEffJar \
			-c $snpEffDir/snpEff.config \
			-v -o gatk hg19 \
			-stats $analysisDir/MuTect/snpEff_summary.html \
                	$analysisDir/MuTect/cohort.raw.vcf > $analysisDir/MuTect/cohort.snpEff.vcf
	}

	task ( "$analysisDir/MuTect/cohort.snpEff.annotated.vcf" <- ["$analysisDir/MuTect/cohort.raw.vcf", "$analysisDir/MuTect/cohort.snpEff.vcf"], taskName := "VariantAnnotator of SnpEff" ) {
        	sys $javaApp -jar $gatkJar \
               		-T VariantAnnotator \
               		-R $reference \
               		-A SnpEff \
               		--variant $analysisDir/MuTect/cohort.raw.vcf \
               		--snpEffFile $analysisDir/MuTect/cohort.snpEff.vcf \
               		-o $analysisDir/MuTect/cohort.snpEff.annotated.vcf
	}

}

string cohortRecalibratedSnpsVcf = "$analysisDir/intermediate/cohort_recalibrated_snps.vcf"
task (  cohortRecalibratedSnpsVcf <- ["$analysisDir/intermediate/recalibrate_SNP.recal", "$analysisDir/intermediate/recalibrate_SNP.tranches"] ) {
	sys $javaApp -Xmx64G -jar $gatkJar \
		-T ApplyRecalibration \
		-R $reference \
		-input $analysisDir/intermediate/cohort.raw.hc.g.vcf \
		-mode SNP \
		--ts_filter_level 99.5 \
		-tranchesFile $analysisDir/intermediate/recalibrate_SNP.tranches \
		-recalFile $analysisDir/intermediate/recalibrate_SNP.recal \
		-o $cohortRecalibratedSnpsVcf
}

task ( [ "$analysisDir/intermediate/recalibrate_INDEL.recal", "$analysisDir/intermediate/recalibrate_INDEL.tranches", "$analysisDir/intermediate/recalibrate_INDEL_plots.R" ] <- "$analysisDir/intermediate/cohort_recalibrated_snps.vcf", taskName:="IndelVariantRecalibrator") {
	sys $javaApp -jar $gatkJar \
		-T VariantRecalibrator \
		-R $reference \
		-input $analysisDir/intermediate/cohort_recalibrated_snps.vcf \
		-resource:mills,known=false,training=true,truth=true,prior=12.0 $gatkMills \
		-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $gatkDbSnp \
		-an QD -an DP -an FS -an MQRankSum -an ReadPosRankSum -an InbreedingCoeff \
		-mode INDEL \
		-tranche 100.0 -tranche 99.9 -tranche 99.5 -tranche 99.0 -tranche 90.0 \
		--maxGaussians 4 \
		-recalFile $analysisDir/intermediate/recalibrate_INDEL.recal \
		-tranchesFile $analysisDir/intermediate/recalibrate_INDEL.tranches \
		-rscriptFile $analysisDir/intermediate/recalibrate_INDEL_plots.R
}

task ( "$analysisDir/VCF/cohort_recalibrated_variants.vcf" <- ["$analysisDir/intermediate/recalibrate_INDEL.recal", "$analysisDir/intermediate/recalibrate_INDEL.tranches", "$analysisDir/intermediate/cohort_recalibrated_snps.vcf" ], taskName:="ApplyIndelRecalibration" ) {
	sys $javaApp -jar $gatkJar \
		-T ApplyRecalibration \
		-R $reference \
		-input $analysisDir/intermediate/cohort_recalibrated_snps.vcf \
		-mode INDEL \
		--ts_filter_level 99.0 \
		-recalFile $analysisDir/intermediate/recalibrate_INDEL.recal \
		-tranchesFile $analysisDir/intermediate/recalibrate_INDEL.tranches \
		-o $analysisDir/VCF/cohort_recalibrated_variants.vcf
}

task ( "$analysisDir/VCF/cohort_recalibrated_variants.eval.txt" <- "$analysisDir/VCF/cohort_recalibrated_variants.vcf", taskName:="VariantEvaluation") {
	sys $javaApp -Xmx64G -jar $gatkJar \
        	-T VariantEval \
                -R $reference \
		--eval $analysisDir/VCF/cohort_recalibrated_variants.vcf \
                -o $analysisDir/VCF/cohort_recalibrated_variants.eval.txt

}

task ( "$analysisDir/intermediate/cohort_recalibrated_variants.snpEff.vcf" <- "$analysisDir/VCF/cohort_recalibrated_variants.vcf", taskName:="SnpEff" ) {
	sys $javaApp -jar $snpEffJar -c /ngs/ngs15/golharr/apps/SnpEff-4.1a-2015-01-14/snpEff.config -v -o gatk hg19 \
		$analysisDir/VCF/cohort_recalibrated_variants.vcf > $analysisDir/intermediate/cohort_recalibrated_variants.snpEff.vcf
}

task ( "$analysisDir/VCF/cohort_recalibrated_variants.snpEff.annotated.vcf" <- "$analysisDir/intermediate/cohort_recalibrated_variants.snpEff.vcf", taskName:="SnpEffAnnotate" ) {
	sys $javaApp -jar $gatkJar \
		-T VariantAnnotator \
		-R $reference \
		-A SnpEff \
		--variant $analysisDir/VCF/cohort_recalibrated_variants.vcf \
		--snpEffFile $analysisDir/intermediate/cohort_recalibrated_variants.snpEff.vcf \
		-o $analysisDir/VCF/cohort_recalibrated_variants.snpEff.annotated.vcf
}

task ( "$analysisDir/VCF/cohort_recalibrated_variants.snpEff.annotated.txt" <- "$analysisDir/VCF/cohort_recalibrated_variants.snpEff.annotated.vcf", taskName:="VCFToTab" ) {
	sys $javaApp -jar /home/golharr/workspace/rgtools/dist/VCFToTab.jar V=$analysisDir/VCF/cohort_recalibrated_variants.snpEff.annotated.vcf O=$analysisDir/VCF/cohort_recalibrated_variants.snpEff.annotated.txt
}

