#!/usr/bin/env bds
# Used to seperate human and mouse reads from PDX samples
# Based on http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0074432#s2

#string external_packages = "/apps/sys/galaxy/external_packages"
#string reference_genomes = "/ng18/galaxy/reference_genomes"

string external_packages = "/ngs/apps"
string reference_genomes = "/ngs/reference"

string bwaApp = "$external_packages/bwa-0.7.12/bwa"
string bowtie2App = "$external_packages/bowtie2-2.2.6/bowtie2"
string javaApp = "$external_packages/jdk1.6.0_45/bin/java"
string picardJar = "$external_packages/picard-tools-1.129/picard.jar"
string samtoolsApp = "$external_packages/samtools-0.1.19/samtools"
string countReadPairsAppsJar = "/home/golharr/workspace/rgtools/dist/CountMappedReadPairs.jar" 

string graftGenome = "hg19"
string graftReference = "$reference_genomes/$graftGenome/$graftGenome.fa"
string graftbwaReference = "$reference_genomes/$graftGenome/bwa_index/$graftGenome"
string graftbowtie2Reference = "$reference_genomes/$graftGenome/bowtie2_index/$graftGenome"

string hostGenome = "mm10"
string hostReference = "$reference_genomes/$hostGenome/$hostGenome.fa"
string hostbwaReference = "$reference_genomes/$hostGenome/bwa_index/$hostGenome"
string hostbowtie2Reference = "$reference_genomes/$hostGenome/bowtie2_index/$hostGenome"

print "PDX Pipeline v1.0\n"

# 1.  Get the cohort of samples to process.  The name of the file is either 
#     passed on the command line as the first argument, or is assumed to be
#     in the current directory and named samples.txt

string readType	# single/paired
string cohort = "samples.txt"

void usage() {
	print "Usage: PDX.bds -readType [single/paired] [-cohort <samples.txt>]\n"
	exit(-1)
}

void checkParameters() {
	if (readType.isEmpty()) {
		print "Error: readType not specified\n"
		usage()
	}

	if (readType != "single") {
		if (readType != "paired") {
			print "Error: Unknown readType: $readType\n"
			usage()
		}
	}
		
	if (!cohort.canRead()) {
		print "ERROR: Unable to locate $cohort\n"
		usage()
	}
	print "\tcohort: $cohort\n"
	print "\tread type: $readType\n"
	print "\n"
}

checkParameters()

# 2.  Read in the list of samples including sample name, fastq1, fastq2 and
#     build a sample list

string[] samples
string{} fq1
string{} fq2

string suffix = ".fastq.gz"

string[] lines = cohort.readLines()
for ( string line : lines ) {
	string sample
	string fastq1
	string fastq2
	(sample, fastq1, fastq2) = line.split('\t')

	samples.add(sample)

	if (!fastq1.endsWith(suffix)) {
		print "Error: FastQ files must be in the format of <samplename>.fastq.gz\n"
		exit(-1)
	}
	fq1{sample} = fastq1

	if (readType == "paired") {
		if (fastq2.isEmpty()) {
			print "Error: Expected fastq2 but none was specified for $sample\n"
			exit(-1)
		}
		if (!fastq2.endsWith(suffix)) {
			print "Error: FastQ files must be in the format of <samplename>.fastq.gz\n"
			exit(-1)
		}
		fq2{sample} = fastq2
	}
}

# Print out the sample information to see that it was loaded correctly
print "Samples:\n"
for (string sample : samples) {
        print "\t$sample\n"
}
print "\n"

# Create intermediate analysis directories
sys if [ ! -d analysis/pdx ]; then mkdir -p analysis/pdx; fi

# For each sample:
for (string sample : samples) {
	string fastq1
	string fastq2
		
	fastq1 = fq1{sample}
	if (readType.startsWith("paired")) {
	        fastq2 = fq2{sample}
        }

	string graftSamFile = "analysis/pdx/$sample.$graftGenome.sam"
        string graftMapped_1 = "analysis/pdx/$sample.$graftGenome.aligned.fastq.1.gz"
        string graftMapped_2 = "analysis/pdx/$sample.$graftGenome.aligned.fastq.2.gz"
        string graftUnmapped_1 = "analysis/pdx/$sample.$graftGenome.unaligned.fastq.1.gz"
        string graftUnmapped_2 = "analysis/pdx/$sample.$graftGenome.unaligned.fastq.2.gz"

	string graftAlignedHostSamFile = "analysis/pdx/$sample.graftAligned.$hostGenome.sam"
	string graftUnalignedHostSamFile = "analysis/pdx/$sample.graftUnaligned.$hostGenome.sam"

	# Map sample to hg19 (graft) to get graft mapped and unmapped
	task ([graftSamFile, graftMapped_1, graftMapped_2, graftUnmapped_1, graftUnmapped_2] <- [fastq1, fastq2], taskName := sample+"_bowtie2", cpus := 8) {
		sys $bowtie2App --no-mixed --un-conc-gz analysis/pdx/$sample.$graftGenome.unaligned.fastq.gz --al-conc-gz analysis/pdx/$sample.$graftGenome.aligned.fastq.gz -p 8 -1 $fastq1 -2 $fastq2 \
			--no-unal --rg-id $sample --rg 'SM:$sample\tLB:$sample\tPL:illumina' -S $graftSamFile -x $graftbowtie2Reference
	}

	# Map graft mapped to mm10 to get graft.mapped.host.[mapped/unmapped]
	task (graftAlignedHostSamFile <- [graftMapped_1, graftMapped_2], taskName := sample+"_graftMappedToHost", cpus := 8) {
		sys $bowtie2App --no-mixed --un-conc-gz analysis/pdx/$sample.graftAlignedHostUnaligned.fastq.gz --al-conc-gz analysis/pdx/$sample.graftAlignedHostAligned.fastq.gz \
			-p 8 -1 $graftMapped_1 -2 $graftMapped_2 \
                        --no-unal --rg-id $sample --rg 'SM:$sample\tLB:$sample\tPL:illumina' -S $graftAlignedHostSamFile -x $hostbowtie2Reference
	}
	
	# Map graft unmapped to mm10 to get graft.unmapped.host.[mapped/unmapped]
        task (graftUnalignedHostSamFile <- [graftUnmapped_1, graftUnmapped_2], taskName := sample+"_graftUnmappedToHost", cpus := 8) {
		sys $bowtie2App --no-mixed --un-conc-gz analysis/pdx/$sample.graftUnalignedHostUnaligned.fastq.gz --al-conc-gz analysis/pdx/$sample.graftUnalignedHostAligned.fastq.gz \
			-p 8 -1 $graftUnmapped_1 -2 $graftUnmapped_2 \
                        --no-unal --rg-id $sample --rg 'SM:$sample\tLB:$sample\tPL:illumina' -S $graftUnalignedHostSamFile -x $hostbowtie2Reference
        }
}
